{"ast":null,"code":"var _jsxFileName = \"/home/sonali/Downloads/react/theme/src/components/dashboard/chartsData/chartist-charts-data.jsx\";\nimport React from 'react';\nimport { Chart } from \"react-google-charts\";\nimport configDB from '../../../data/customizer/config';\nconst primary = localStorage.getItem('default_color') || configDB.data.color.primary_color;\nconst secondary = localStorage.getItem('secondary_color') || configDB.data.color.secondary_color;\nexport const smallchart1data = {\n  labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n  series: [[400, 900, 800, 1000, 700, 1200, 300], [1000, 500, 600, 400, 700, 200, 1100]]\n};\nexport const smallchart1option = {\n  stackBars: true,\n  axisX: {\n    showGrid: false,\n    showLabel: false,\n    offset: 0\n  },\n  axisY: {\n    low: 0,\n    showGrid: false,\n    showLabel: false,\n    offset: 0,\n    labelInterpolationFnc: function (value) {\n      return value / 1000 + 'k';\n    }\n  }\n};\nexport const smallchart2data = {\n  labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n  series: [[400, 600, 900, 800, 1000, 1200, 500], [1000, 800, 500, 600, 400, 200, 900]]\n};\nexport const smallchart2option = {\n  stackBars: true,\n  axisX: {\n    showGrid: false,\n    showLabel: false,\n    offset: 0\n  },\n  axisY: {\n    low: 0,\n    showGrid: false,\n    showLabel: false,\n    offset: 0,\n    labelInterpolationFnc: function (value) {\n      return value / 1000 + 'k';\n    }\n  }\n};\nexport const smallchart3data = {\n  labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n  series: [[1100, 900, 600, 1000, 700, 1200, 300], [300, 500, 800, 400, 700, 200, 1100]]\n};\nexport const smallchart3option = {\n  stackBars: true,\n  axisX: {\n    showGrid: false,\n    showLabel: false,\n    offset: 0\n  },\n  axisY: {\n    low: 0,\n    showGrid: false,\n    showLabel: false,\n    offset: 0,\n    labelInterpolationFnc: function (value) {\n      return value / 1000 + 'k';\n    }\n  }\n};\nexport const smallchart4data = {\n  labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n  series: [[400, 600, 800, 1000, 700, 1100, 300], [1000, 500, 600, 300, 700, 200, 1100]]\n};\nexport const smallchart4option = {\n  stackBars: true,\n  axisX: {\n    showGrid: false,\n    showLabel: false,\n    offset: 0\n  },\n  axisY: {\n    low: 0,\n    showGrid: false,\n    showLabel: false,\n    offset: 0,\n    labelInterpolationFnc: function (value) {\n      return value / 1000 + 'k';\n    }\n  }\n}; // export const GooglePieChart2 = () => {\n//     return (\n//         <Chart\n//             width={'100%'}\n//             height={'320px'}\n//             chartType=\"PieChart\"\n//             loader={<div>{\"Loading Chart\"}</div>}\n//             data={[\n//                 ['Tickets', 'Numbers'],\n//                 ['Open', 30],\n//                 ['Closed', 30],\n//                 ['Progress', 40]\n//             ]}\n//             options={{\n//                 title: '',\n//                 colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary],\n//                 is3D: true,\n//             }}\n//             rootProps={{ 'data-testid': '2' }}\n//         />\n//     )\n// }\n\nexport const GoogleDonutChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '300px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Tickets', 'Categories'], ['Bug/Error', 20], ['Feature Request', 30], ['Security', 30], ['Others', 20]],\n    options: {\n      title: '',\n      colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary, secondary],\n      pieHole: 0.4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleBasicbarChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"BarChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n    options: {\n      title: 'Population of Largest U.S. Cities',\n      chartArea: {\n        width: '50%'\n      },\n      colors: [primary, secondary],\n      backgroundColor: 'transparent',\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0\n      },\n      vAxis: {\n        title: 'City'\n      }\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  });\n};\nexport const barChartData = {\n  labels: ['Low', 'Medium', 'High'],\n  datasets: [{\n    label: 'y',\n    lagend: 'y',\n    data: [50, 59, 80],\n    borderColor: primary,\n    backgroundColor: \"rgba(145, 46, 252, 0.4)\",\n    highlightFill: \"rgba(145, 46, 252, 0.4)\",\n    highlightStroke: primary,\n    borderWidth: 2\n  } // {\n  //     label: 'z',\n  //     lagend: 'z',\n  //     data: [28, 48, 40, 19, 86, 27, 90],\n  //     borderColor: secondary,\n  //     backgroundColor: \"rgba(247, 49, 100, 0.4)\",\n  //     highlightFill: \"rgba(247, 49, 100, 0.4)\",\n  //     highlightStroke: secondary,\n  //     borderWidth: 2\n  // }\n  ],\n  plugins: {\n    datalabels: {\n      display: false,\n      color: 'white'\n    }\n  }\n};\nexport const barChartOptions = {\n  maintainAspectRatio: true,\n  legend: {\n    display: false\n  },\n  plugins: {\n    datalabels: {\n      display: false\n    }\n  }\n};\nexport const GoogleTreeChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"WordTree\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Phrases'], ['cats are better than dogs'], ['cats eat kibble'], ['cats are better than hamsters'], ['cats are awesome'], ['cats are people too'], ['cats eat mice'], ['cats meowing'], ['cats in the cradle'], ['cats eat mice'], ['cats in the cradle lyrics'], ['cats eat kibble'], ['cats for adoption'], ['cats are family'], ['cats eat mice'], ['cats are better than kittens'], ['cats are evil'], ['cats are weird'], ['cats eat mice']],\n    options: {\n      wordtree: {\n        format: 'implicit',\n        word: 'cats',\n        backgroundColor: 'transparent'\n      }\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  });\n};\nexport const doughnutData = {\n  labels: ['Bug/Error', 'Feature Request', 'Security', 'Others'],\n  datasets: [{\n    data: [350, 450, 100, 200],\n    backgroundColor: [primary, secondary, \"#51bb25\", \"#f8d62b\"]\n  }]\n};\nexport const doughnutOption = {\n  maintainAspectRatio: false,\n  legend: {\n    display: false\n  },\n  plugins: {\n    datalabels: {\n      display: false,\n      color: 'white'\n    }\n  }\n};","map":{"version":3,"sources":["/home/sonali/Downloads/react/theme/src/components/dashboard/chartsData/chartist-charts-data.jsx"],"names":["React","Chart","configDB","primary","localStorage","getItem","data","color","primary_color","secondary","secondary_color","smallchart1data","labels","series","smallchart1option","stackBars","axisX","showGrid","showLabel","offset","axisY","low","labelInterpolationFnc","value","smallchart2data","smallchart2option","smallchart3data","smallchart3option","smallchart4data","smallchart4option","GoogleDonutChart","title","colors","pieHole","GoogleBasicbarChart","chartArea","width","backgroundColor","hAxis","minValue","vAxis","barChartData","datasets","label","lagend","borderColor","highlightFill","highlightStroke","borderWidth","plugins","datalabels","display","barChartOptions","maintainAspectRatio","legend","GoogleTreeChart","wordtree","format","word","doughnutData","doughnutOption"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\nimport configDB from '../../../data/customizer/config'\nconst primary = localStorage.getItem('default_color') || configDB.data.color.primary_color;\nconst secondary = localStorage.getItem('secondary_color') || configDB.data.color.secondary_color;\n\nexport const smallchart1data = {\n    labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n    series: [\n        [400, 900, 800, 1000, 700, 1200, 300],\n        [1000, 500, 600, 400, 700, 200, 1100]\n    ]\n}\nexport const smallchart1option = {\n    stackBars: true,\n    axisX: {\n        showGrid: false,\n        showLabel: false,\n        offset: 0\n    },\n    axisY: {\n        low: 0,\n        showGrid: false,\n        showLabel: false,\n        offset: 0,\n        labelInterpolationFnc: function (value) {\n            return (value / 1000) + 'k';\n        }\n    }\n\n}\nexport const smallchart2data = {\n    labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n    series: [\n        [400, 600, 900, 800, 1000, 1200, 500],\n        [1000, 800, 500, 600, 400, 200, 900]\n    ]\n}\nexport const smallchart2option = {\n    stackBars: true,\n    axisX: {\n        showGrid: false,\n        showLabel: false,\n        offset: 0\n    },\n    axisY: {\n        low: 0,\n        showGrid: false,\n        showLabel: false,\n        offset: 0,\n        labelInterpolationFnc: function (value) {\n            return (value / 1000) + 'k';\n        }\n    }\n\n}\nexport const smallchart3data = {\n    labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n    series: [\n        [1100, 900, 600, 1000, 700, 1200, 300],\n        [300, 500, 800, 400, 700, 200, 1100]\n    ]\n}\nexport const smallchart3option = {\n    stackBars: true,\n    axisX: {\n        showGrid: false,\n        showLabel: false,\n        offset: 0\n    },\n    axisY: {\n        low: 0,\n        showGrid: false,\n        showLabel: false,\n        offset: 0,\n        labelInterpolationFnc: function (value) {\n            return (value / 1000) + 'k';\n        }\n    }\n}\n\nexport const smallchart4data = {\n    labels: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'],\n    series: [\n        [400, 600, 800, 1000, 700, 1100, 300],\n        [1000, 500, 600, 300, 700, 200, 1100]\n    ]\n}\nexport const smallchart4option = {\n    stackBars: true,\n    axisX: {\n        showGrid: false,\n        showLabel: false,\n        offset: 0\n    },\n    axisY: {\n        low: 0,\n        showGrid: false,\n        showLabel: false,\n        offset: 0,\n        labelInterpolationFnc: function (value) {\n            return (value / 1000) + 'k';\n        }\n    }\n}\n\n// export const GooglePieChart2 = () => {\n//     return (\n//         <Chart\n//             width={'100%'}\n//             height={'320px'}\n//             chartType=\"PieChart\"\n//             loader={<div>{\"Loading Chart\"}</div>}\n//             data={[\n//                 ['Tickets', 'Numbers'],\n//                 ['Open', 30],\n//                 ['Closed', 30],\n//                 ['Progress', 40]\n               \n//             ]}\n//             options={{\n//                 title: '',\n//                 colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary],\n//                 is3D: true,\n//             }}\n//             rootProps={{ 'data-testid': '2' }}\n//         />\n//     )\n// }\n\nexport const GoogleDonutChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'300px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Tickets', 'Categories'],\n                ['Bug/Error', 20],\n                ['Feature Request', 30],\n                ['Security', 30],\n                ['Others', 20]\n               \n            ]}\n            options={{\n                title: '',\n                colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary, secondary],\n                pieHole: 0.4,\n            }}\n        />\n\n    )\n}\n\nexport const GoogleBasicbarChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"BarChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['City', '2010 Population', '2000 Population'],\n                ['New York City, NY', 8175000, 8008000],\n                ['Los Angeles, CA', 3792000, 3694000],\n                ['Chicago, IL', 2695000, 2896000],\n                ['Houston, TX', 2099000, 1953000],\n                ['Philadelphia, PA', 1526000, 1517000],\n            ]}\n            options={{\n                title: 'Population of Largest U.S. Cities',\n                chartArea: { width: '50%' },\n                colors: [primary, secondary],\n                backgroundColor: 'transparent',\n                hAxis: {\n                    title: 'Total Population',\n                    minValue: 0,\n                },\n                vAxis: {\n                    title: 'City',\n                },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n}\n\nexport const barChartData = {\n    labels: ['Low' , 'Medium' , 'High'],\n    datasets: [\n        {\n            label: 'y',\n            lagend: 'y',\n            data: [50, 59, 80],\n            borderColor: primary,\n            backgroundColor: \"rgba(145, 46, 252, 0.4)\",\n            highlightFill: \"rgba(145, 46, 252, 0.4)\",\n            highlightStroke: primary,\n            borderWidth: 2\n        },\n        // {\n        //     label: 'z',\n        //     lagend: 'z',\n        //     data: [28, 48, 40, 19, 86, 27, 90],\n        //     borderColor: secondary,\n        //     backgroundColor: \"rgba(247, 49, 100, 0.4)\",\n        //     highlightFill: \"rgba(247, 49, 100, 0.4)\",\n        //     highlightStroke: secondary,\n        //     borderWidth: 2\n        // }\n    ],\n    plugins: {\n        datalabels: {\n            display: false,\n            color: 'white'\n        }\n    }\n}\nexport const barChartOptions = {\n    maintainAspectRatio: true,\n    legend: {\n        display: false,\n    },\n    plugins: {\n        datalabels: {\n            display: false,\n        }\n    }\n}\n\nexport const GoogleTreeChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"WordTree\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Phrases'],\n                ['cats are better than dogs'],\n                ['cats eat kibble'],\n                ['cats are better than hamsters'],\n                ['cats are awesome'],\n                ['cats are people too'],\n                ['cats eat mice'],\n                ['cats meowing'],\n                ['cats in the cradle'],\n                ['cats eat mice'],\n                ['cats in the cradle lyrics'],\n                ['cats eat kibble'],\n                ['cats for adoption'],\n                ['cats are family'],\n                ['cats eat mice'],\n                ['cats are better than kittens'],\n                ['cats are evil'],\n                ['cats are weird'],\n                ['cats eat mice'],\n            ]}\n            options={{\n                wordtree: {\n                    format: 'implicit',\n                    word: 'cats',\n                    backgroundColor: 'transparent',\n                },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n}\nexport const doughnutData = {\n    labels: ['Bug/Error', 'Feature Request', 'Security' , 'Others'],\n    datasets: [{\n        data: [350, 450, 100, 200],\n        backgroundColor: [primary, secondary, \"#51bb25\" , \"#f8d62b\"]\n    }]\n}\nexport const doughnutOption = {\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    plugins: {\n        datalabels: {\n            display: false,\n            color: 'white'\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}