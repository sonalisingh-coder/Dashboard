{"ast":null,"code":"var _jsxFileName = \"/home/sonali/Downloads/react/theme/src/components/support-ticket/index.jsx\";\nimport React, { Fragment, useState } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb';\nimport ReactFileReader from 'react-file-reader';\nimport { CsvToHtmlTable } from 'react-csv-to-table';\nimport Papa from 'papaparse';\nimport { Container, Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\nimport DataTable from 'react-data-table-component';\nimport { productData, productColumns } from '../../data/product-list';\nimport csvFile from \"./ticket_classi_pred.csv\";\n\nconst fs = require(\"fs\");\n\nconst sampleData = `\nChrysler Imperial,14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\nFiat 128,32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n`; // let csvData= null;\n// Papa.parse(csvFile, {\n//     download: true,\n//     complete: function (input) {\n//          const records = input.data;\n//     },\n//     step: function (row) {\n//             //  csvData=row;\n//             //  console.log(row.data);\n//              }\n// });\n\nconst csv = fs.readFileSync(\"ticket_classi_pred.csv\", \"utf8\"); // Convert the data to String and \n// split it in an array \n\nvar array = csv.toString().split(\"\\r\"); // All the rows of the CSV will be  \n// converted to JSON objects which  \n// will be added to result in an array \n\nlet result = []; // The array[0] contains all the  \n// header columns so we store them  \n// in headers array \n\nlet headers = array[0].split(\", \"); // Since headers are separated, we  \n// need to traverse remaining n-1 rows.  \n\nfor (let i = 1; i < array.length - 1; i++) {\n  let obj = {}; // Create an empty object to later add  \n  // values of the current row to it \n  // Declare string str as current array \n  // value to change the delimiter and  \n  // store the generated string in a new \n  // string s \n\n  let str = array[i];\n  let s = ''; // By Default, we get the comma seprated \n  // values of a cell in quotes \" \" so we  \n  // use flag to keep track of quotes and  \n  // split the string accordingly \n  // If we encounter opening quote (\")  \n  // then we keep commas as it is otherwise \n  // we replace them with pipe | \n  // We keep adding the characters we  \n  // traverse to a String s \n\n  let flag = 0;\n\n  for (let ch of str) {\n    if (ch === '\"' && flag === 0) {\n      flag = 1;\n    } else if (ch === '\"' && flag == 1) flag = 0;\n\n    if (ch === ', ' && flag === 0) ch = '|';\n    if (ch !== '\"') s += ch;\n  } // Split the string using pipe delimiter |  \n  // and store the values in a properties array \n\n\n  let properties = s.split(\"|\"); // For each header, if the value contains \n  // multiple comma separated data, then we \n  // store it in the form of array otherwise \n  // directly the value is stored \n\n  for (let j in headers) {\n    if (properties[j].includes(\", \")) {\n      obj[headers[j]] = properties[j].split(\", \").map(item => item.trim());\n    } else obj[headers[j]] = properties[j];\n  } // Add the generated object to our \n  // result array  \n\n\n  result.push(obj);\n}\n\nfs.writeFileSync('output.js', result);\n\nclass Productlist extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      csvData: null\n    };\n\n    this.handleFiles = files => {\n      var reader = new FileReader();\n\n      reader.onload = e => {\n        // Use reader.result\n        this.setState({\n          csvData: reader.result\n        });\n      };\n\n      console.log(files);\n      reader.readAsText(files);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(ReactFileReader, {\n      multipleFiles: false,\n      fileTypes: [\".csv\"],\n      handleFiles: this.handleFiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"Upload\")), /*#__PURE__*/React.createElement(CsvToHtmlTable, {\n      data: this.state.csvData || sampleData,\n      csvDelimiter: \",\",\n      tableClassName: \"table table-striped table-hover\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Breadcrumb, {\n      parent: \"Dashboard\",\n      title: \"Ticket Classification\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 1\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      sm: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, \"Ticket Classification\", \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 54\n      }\n    }, \"\")), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-responsive product-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      noHeader: true,\n      columns: productColumns,\n      data: productData,\n      pagination: true,\n      highlightOnHover: true,\n      persistTableHead: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 23\n      }\n    }))))))));\n  }\n\n} // const Productlist = (data) => {\n//   const [csvData , setCsvData] = useState({});\n//   const handleFiles = files => {\n//     var reader = new FileReader();\n//     reader.onload = () => {\n//         // Use reader.result\n//         setCsvData({\n//           csvData: reader.result\n//         })\n//       }\n//       reader.readAsText(files[0]);\n// }\n//     return (\n//   <Fragment>\n//   <Breadcrumb parent=\"ECommerce\" title=\"Product List\"/>\n//   <Container fluid={true}>\n//     <Row>\n//         <Col sm=\"12\">\n//             <Card>\n//                 <CardHeader>\n//                     <h5>{\"ProductListTitle\"} </h5><span>{\"ProductListDesc\"}</span>\n//                 </CardHeader>\n//                 <CardBody>\n//                     <div className=\"table-responsive product-table\">\n//                         <DataTable\n//                             noHeader\n//                             columns={productColumns}\n//                             data={productData}\n//                             pagination\n//                             highlightOnHover\n//                             persistTableHead\n//                         />\n//                     </div>\n//                 </CardBody>\n//             </Card>\n//         </Col>\n//     </Row>\n//    </Container>\n//    </Fragment>\n//     )\n//   }\n\n\nexport default Productlist;","map":{"version":3,"sources":["/home/sonali/Downloads/react/theme/src/components/support-ticket/index.jsx"],"names":["React","Fragment","useState","Breadcrumb","ReactFileReader","CsvToHtmlTable","Papa","Container","Row","Col","Card","CardHeader","CardBody","DataTable","productData","productColumns","csvFile","fs","require","sampleData","csv","readFileSync","array","toString","split","result","headers","i","length","obj","str","s","flag","ch","properties","j","includes","map","item","trim","push","writeFileSync","Productlist","Component","state","csvData","handleFiles","files","reader","FileReader","onload","e","setState","console","log","readAsText","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,GAAtB,EAA0BC,IAA1B,EAA+BC,UAA/B,EAA0CC,QAA1C,QAAyD,YAAzD;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAAQC,WAAR,EAAoBC,cAApB,QAAyC,yBAAzC;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMC,UAAU,GAAI;AACpB;AACA;AACA,CAHA,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAG,GAAGH,EAAE,CAACI,YAAH,CAAgB,wBAAhB,EAA0C,MAA1C,CAAZ,C,CAEA;AACA;;AACA,IAAIC,KAAK,GAAGF,GAAG,CAACG,QAAJ,GAAeC,KAAf,CAAqB,IAArB,CAAZ,C,CAEA;AACA;AACA;;AACA,IAAIC,MAAM,GAAG,EAAb,C,CAEA;AACA;AACA;;AACA,IAAIC,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,CAAe,IAAf,CAAd,C,CAEA;AACA;;AACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAAN,GAAe,CAAnC,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,MAAIE,GAAG,GAAG,EAAV,CADyC,CAGzC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,GAAG,GAAGR,KAAK,CAACK,CAAD,CAAf;AACA,MAAII,CAAC,GAAG,EAAR,CAVyC,CAYzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,IAAI,GAAG,CAAX;;AACA,OAAK,IAAIC,EAAT,IAAeH,GAAf,EAAoB;AAClB,QAAIG,EAAE,KAAK,GAAP,IAAcD,IAAI,KAAK,CAA3B,EAA8B;AAC5BA,MAAAA,IAAI,GAAG,CAAP;AACD,KAFD,MAGK,IAAIC,EAAE,KAAK,GAAP,IAAcD,IAAI,IAAI,CAA1B,EAA6BA,IAAI,GAAG,CAAP;;AAClC,QAAIC,EAAE,KAAK,IAAP,IAAeD,IAAI,KAAK,CAA5B,EAA+BC,EAAE,GAAG,GAAL;AAC/B,QAAIA,EAAE,KAAK,GAAX,EAAgBF,CAAC,IAAIE,EAAL;AACjB,GA7BwC,CA+BzC;AACA;;;AACA,MAAIC,UAAU,GAAGH,CAAC,CAACP,KAAF,CAAQ,GAAR,CAAjB,CAjCyC,CAmCzC;AACA;AACA;AACA;;AACA,OAAK,IAAIW,CAAT,IAAcT,OAAd,EAAuB;AACrB,QAAIQ,UAAU,CAACC,CAAD,CAAV,CAAcC,QAAd,CAAuB,IAAvB,CAAJ,EAAkC;AAChCP,MAAAA,GAAG,CAACH,OAAO,CAACS,CAAD,CAAR,CAAH,GAAkBD,UAAU,CAACC,CAAD,CAAV,CACfX,KADe,CACT,IADS,EACHa,GADG,CACCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADT,CAAlB;AAED,KAHD,MAIKV,GAAG,CAACH,OAAO,CAACS,CAAD,CAAR,CAAH,GAAkBD,UAAU,CAACC,CAAD,CAA5B;AACN,GA7CwC,CA+CzC;AACA;;;AACAV,EAAAA,MAAM,CAACe,IAAP,CAAYX,GAAZ;AACD;;AAEDZ,EAAE,CAACwB,aAAH,CAAiB,WAAjB,EAA6BhB,MAA7B;;AAEA,MAAMiB,WAAN,SAA0B1C,KAAK,CAAC2C,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAClC;AACJC,MAAAA,OAAO,EAAE;AADL,KADkC;;AAAA,SA0DxCC,WA1DwC,GA0D1BC,KAAK,IAAI;AACrB,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAkBC,CAAD,IAAO;AACtB;AACA,aAAKC,QAAL,CAAc;AACZP,UAAAA,OAAO,EAAEG,MAAM,CAACvB;AADJ,SAAd;AAGD,OALD;;AAMA4B,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACAC,MAAAA,MAAM,CAACO,UAAP,CAAkBR,KAAlB;AACD,KApEuC;AAAA;;AAMxCS,EAAAA,MAAM,GAAE;AACN,wBAAS,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACP,oBAAC,eAAD;AACE,MAAA,aAAa,EAAE,KADjB;AAEE,MAAA,SAAS,EAAE,CAAC,MAAD,CAFb;AAIA,MAAA,WAAW,EAAE,KAAKV,WAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CADO,eAWP,oBAAC,cAAD;AACE,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,OAAX,IAAsB1B,UAD9B;AAEE,MAAA,YAAY,EAAC,GAFf;AAGE,MAAA,cAAc,EAAC,iCAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXO,eAmBb,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAC,WAAnB;AAA+B,MAAA,KAAK,EAAC,uBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBa,eAoBb,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,uBAAL,MADJ,eACuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,EAAP,CADvC,CADJ,eAII,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,OAAO,EAAEJ,cAFb;AAGI,MAAA,IAAI,EAAED,WAHV;AAII,MAAA,UAAU,MAJd;AAKI,MAAA,gBAAgB,MALpB;AAMI,MAAA,gBAAgB,MANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAJJ,CADJ,CADJ,CAJF,CApBa,CAAT;AAgDD;;AAvDuC,C,CAuE1C;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACQ;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAER;AAEA;;;AAIA,eAAe4B,WAAf","sourcesContent":["import React, { Fragment , useState} from 'react';\nimport Breadcrumb from '../../layout/breadcrumb'\nimport ReactFileReader from 'react-file-reader';\nimport { CsvToHtmlTable } from 'react-csv-to-table';\nimport Papa from 'papaparse';\nimport {Container,Row,Col,Card,CardHeader,CardBody} from 'reactstrap'\nimport DataTable from 'react-data-table-component';\nimport {productData,productColumns} from '../../data/product-list'\nimport csvFile from \"./ticket_classi_pred.csv\"\nconst fs = require(\"fs\"); \n\nconst sampleData = `\nChrysler Imperial,14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\nFiat 128,32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n`;\n\n// let csvData= null;\n// Papa.parse(csvFile, {\n//     download: true,\n//     complete: function (input) {\n//          const records = input.data;\n//     },\n//     step: function (row) {\n//             //  csvData=row;\n//             //  console.log(row.data);\n//              }\n// });\n\nconst csv = fs.readFileSync(\"ticket_classi_pred.csv\", \"utf8\") \n  \n// Convert the data to String and \n// split it in an array \nvar array = csv.toString().split(\"\\r\"); \n  \n// All the rows of the CSV will be  \n// converted to JSON objects which  \n// will be added to result in an array \nlet result = []; \n  \n// The array[0] contains all the  \n// header columns so we store them  \n// in headers array \nlet headers = array[0].split(\", \") \n  \n// Since headers are separated, we  \n// need to traverse remaining n-1 rows.  \nfor (let i = 1; i < array.length - 1; i++) { \n  let obj = {} \n  \n  // Create an empty object to later add  \n  // values of the current row to it \n  // Declare string str as current array \n  // value to change the delimiter and  \n  // store the generated string in a new \n  // string s \n  let str = array[i] \n  let s = ''\n  \n  // By Default, we get the comma seprated \n  // values of a cell in quotes \" \" so we  \n  // use flag to keep track of quotes and  \n  // split the string accordingly \n  // If we encounter opening quote (\")  \n  // then we keep commas as it is otherwise \n  // we replace them with pipe | \n  // We keep adding the characters we  \n  // traverse to a String s \n  let flag = 0 \n  for (let ch of str) { \n    if (ch === '\"' && flag === 0) { \n      flag = 1 \n    } \n    else if (ch === '\"' && flag == 1) flag = 0 \n    if (ch === ', ' && flag === 0) ch = '|'\n    if (ch !== '\"') s += ch \n  } \n  \n  // Split the string using pipe delimiter |  \n  // and store the values in a properties array \n  let properties = s.split(\"|\") \n  \n  // For each header, if the value contains \n  // multiple comma separated data, then we \n  // store it in the form of array otherwise \n  // directly the value is stored \n  for (let j in headers) { \n    if (properties[j].includes(\", \")) { \n      obj[headers[j]] = properties[j] \n        .split(\", \").map(item => item.trim()) \n    } \n    else obj[headers[j]] = properties[j] \n  } \n  \n  // Add the generated object to our \n  // result array  \n  result.push(obj) \n} \n\nfs.writeFileSync('output.js',result); \n\nclass Productlist extends React.Component {\n  state={\n    csvData: null\n  };\n  \n\n  render(){\n    return   <Fragment>\n      <ReactFileReader \n        multipleFiles={false}\n        fileTypes={[\".csv\"]} \n        \n      handleFiles={this.handleFiles}>\n        <button className='btn'>Upload</button>\n      </ReactFileReader>\n\n     \n      \n      <CsvToHtmlTable\n        data={this.state.csvData || sampleData}\n        csvDelimiter=\",\"\n        tableClassName=\"table table-striped table-hover\"\n      />\n    \n\n\n<Breadcrumb parent=\"Dashboard\" title=\"Ticket Classification\"/>\n<Container fluid={true}>\n\n\n\n  <Row>\n      <Col sm=\"12\">\n          <Card>\n              <CardHeader>\n                  <h5>{\"Ticket Classification\"} </h5><span>{\"\"}</span>\n              </CardHeader>\n              <CardBody>\n                  <div className=\"table-responsive product-table\">\n                      <DataTable\n                          noHeader\n                          columns={productColumns}\n                          data={productData}\n                          pagination\n                          highlightOnHover\n                          persistTableHead\n                      />\n                  </div>\n              </CardBody>\n          </Card>\n      </Col>\n  </Row>\n </Container>\n </Fragment>\n\n  } \n\n\n  handleFiles = files => {\n    var reader = new FileReader();\n    reader.onload =  (e) => {\n      // Use reader.result\n      this.setState({\n        csvData: reader.result\n      })\n    }\n    console.log(files)\n    reader.readAsText(files);\n  }\n\n}\n// const Productlist = (data) => {\n//   const [csvData , setCsvData] = useState({});\n\n//   const handleFiles = files => {\n//     var reader = new FileReader();\n//     reader.onload = () => {\n//         // Use reader.result\n//         setCsvData({\n//           csvData: reader.result\n//         })\n//       }\n//       reader.readAsText(files[0]);\n// }\n\n//     return (\n        //   <Fragment>\n        //   <Breadcrumb parent=\"ECommerce\" title=\"Product List\"/>\n        //   <Container fluid={true}>\n\n        \n\n        //     <Row>\n        //         <Col sm=\"12\">\n        //             <Card>\n        //                 <CardHeader>\n        //                     <h5>{\"ProductListTitle\"} </h5><span>{\"ProductListDesc\"}</span>\n        //                 </CardHeader>\n        //                 <CardBody>\n        //                     <div className=\"table-responsive product-table\">\n        //                         <DataTable\n        //                             noHeader\n        //                             columns={productColumns}\n        //                             data={productData}\n        //                             pagination\n        //                             highlightOnHover\n        //                             persistTableHead\n        //                         />\n        //                     </div>\n        //                 </CardBody>\n        //             </Card>\n        //         </Col>\n        //     </Row>\n        //    </Container>\n        //    </Fragment>\n           \n//     )\n\n//   }\n\n\n\nexport default Productlist\n\n\n"]},"metadata":{},"sourceType":"module"}