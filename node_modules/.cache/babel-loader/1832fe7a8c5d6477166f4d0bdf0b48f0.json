{"ast":null,"code":"var _jsxFileName = \"/home/sonali/Downloads/react/theme/src/components/charts/googleCharts/googlechartData.jsx\";\nimport React from 'react';\nimport { Chart } from \"react-google-charts\";\nimport configDB from '../../../data/customizer/config';\nconst primary = localStorage.getItem('default_color') || configDB.data.color.primary_color;\nconst secondary = localStorage.getItem('secondary_color') || configDB.data.color.secondary_color;\nexport const GooglePieChart1 = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Task', 'Hours per Day'], ['Work', 6.7], ['Eat', 13.3], ['Commute', 20], ['Watch TV', 26.7], ['Sleep', 33.3]],\n    options: {\n      title: 'My Daily Activities',\n      colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary]\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  });\n};\nexport const GooglePieChart2 = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Task', 'Hours per Day'], ['Work', 6.7], ['Eat', 13.3], ['Commute', 20], ['Watch TV', 26.7], ['Sleep', 33.3]],\n    options: {\n      title: 'My Daily Activities',\n      colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary],\n      is3D: true\n    },\n    rootProps: {\n      'data-testid': '2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleDonutChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Task', 'Hours per Day'], ['Work', 11], ['Eat', 2], ['Commute', 2], ['Watch TV', 2], ['Sleep', 7]],\n    options: {\n      title: 'My Daily Activities',\n      colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary, secondary],\n      pieHole: 0.4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleRotatingPieChart1 = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Language', 'Speakers (in millions)'], ['German', 2.85], ['French', 1.66], ['Italian', 0.316], ['Romansh', 0.0791]],\n    options: {\n      legend: 'none',\n      pieSliceText: 'label',\n      title: 'Swiss Language Use (100 degree rotation)',\n      colors: [\"#a927f9\", primary, \"#51bb25\", \"#a927f9\", secondary],\n      pieStartAngle: 100\n    },\n    rootProps: {\n      'data-testid': '4'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleRotatingPieChart2 = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Language', 'Speakers (in millions)'], ['Assamese', 13], ['Bengali', 83], ['Bodo', 1.4], ['Dogri', 2.3], ['Gujarati', 46], ['Hindi', 300], ['Kannada', 38], ['Kashmiri', 5.5], ['Konkani', 5], ['Maithili', 20], ['Malayalam', 33], ['Manipuri', 1.5], ['Marathi', 72], ['Nepali', 2.9], ['Oriya', 33], ['Punjabi', 29], ['Sanskrit', 0.01], ['Santhali', 6.5], ['Sindhi', 2.5], ['Tamil', 61], ['Telugu', 74], ['Urdu', 52]],\n    options: {\n      title: 'Indian Language Use',\n      legend: 'none',\n      pieSliceText: 'label',\n      colors: [\"#a927f9\", primary, \"#fb740d\", secondary, \"#a927f9\", primary, \"#51bb25\", \"#a927f9\", \"#fb740d\", \"#a927f9\", primary, \"#51bb25\", \"#a927f9\", \"#51bb25\", primary, \"#51bb25\", \"#a927f9\", \"#fb740d\", \"#a927f9\", primary, primary, \"#ff9f40\"],\n      slices: {\n        4: {\n          offset: 0.2\n        },\n        12: {\n          offset: 0.3\n        },\n        14: {\n          offset: 0.4\n        },\n        15: {\n          offset: 0.5\n        }\n      }\n    },\n    rootProps: {\n      'data-testid': '5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleSliceCharts = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Pizza', 'Popularity'], ['Pepperoni', 33], ['Hawaiian', 26], ['Mushroom', 22], ['Sausage', 10], ['Anchovies', 9]],\n    options: {\n      title: 'Popularity of Types of Pizza',\n      colors: [primary, secondary, \"#51bb25\", \"#a927f9\", primary],\n      sliceVisibilityThreshold: 0.2\n    },\n    rootProps: {\n      'data-testid': '7'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleAreaChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '300px',\n    chartType: \"AreaChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Year', 'Sales', 'Expenses'], ['2013', 1000, 400], ['2014', 1170, 460], ['2015', 660, 1120], ['2016', 1030, 540]],\n    options: {\n      title: 'Company Performance',\n      hAxis: {\n        title: 'Year',\n        titleTextStyle: {\n          color: '#333'\n        }\n      },\n      vAxis: {\n        minValue: 0\n      },\n      colors: [\"#a927f9\", primary],\n      chartArea: {\n        width: '50%',\n        height: '70%'\n      }\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleStackingChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '300px',\n    chartType: \"AreaChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Year', 'Sales', 'Expenses'], ['2013', 1000, 400], ['2014', 1170, 460], ['2015', 660, 1120], ['2016', 1030, 540]],\n    options: {\n      isStacked: true,\n      height: 300,\n      legend: {\n        position: 'top',\n        maxLines: 3\n      },\n      vAxis: {\n        minValue: 0\n      },\n      colors: [\"#a927f9\", primary]\n    },\n    rootProps: {\n      'data-testid': '2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleGhantChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '300px',\n    chartType: \"Gantt\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [[{\n      type: 'string',\n      label: 'Task ID'\n    }, {\n      type: 'string',\n      label: 'Task Name'\n    }, {\n      type: 'date',\n      label: 'Start Date'\n    }, {\n      type: 'date',\n      label: 'End Date'\n    }, {\n      type: 'number',\n      label: 'Duration'\n    }, {\n      type: 'number',\n      label: 'Percent Complete'\n    }, {\n      type: 'string',\n      label: 'Dependencies'\n    }], ['Research', 'Find sources', new Date(2015, 0, 1), new Date(2015, 0, 5), null, 100, null], ['Write', 'Write paper', null, new Date(2015, 0, 9), 3 * 24 * 60 * 60 * 1000, 25, 'Research,Outline'], ['Cite', 'Create bibliography', null, new Date(2015, 0, 7), 1 * 24 * 60 * 60 * 1000, 20, 'Research'], ['Complete', 'Hand in paper', null, new Date(2015, 0, 10), 1 * 24 * 60 * 60 * 1000, 0, 'Cite,Write'], ['Outline', 'Outline paper', null, new Date(2015, 0, 6), 1 * 24 * 60 * 60 * 1000, 100, 'Research']],\n    options: {\n      gantt: {\n        criticalPathEnabled: false,\n        arrow: {\n          angle: 100,\n          width: 5,\n          color: '#51bb25',\n          radius: 0\n        },\n        palette: [{\n          \"color\": primary,\n          \"dark\": secondary,\n          \"light\": \"#047afb\"\n        }]\n      },\n      backgroundColor: 'transparent'\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleLineChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['month', 'Guardians of the Galaxy', 'The Avengers', 'Transformers: Age of Extinction'], [1, 37.8, 80.8, 41.8], [2, 30.9, 10.5, 32.4], [3, 40.4, 57, 25.7], [4, 11.7, 18.8, 10.5], [5, 20, 17.6, 10.4], [6, 8.8, 13.6, 7.7], [7, 7.6, 12.3, 9.6], [8, 12.3, 29.2, 10.6], [9, 16.9, 42.9, 14.8], [10, 12.8, 30.9, 11.6], [11, 5.3, 7.9, 4.7], [12, 6.6, 8.4, 5.2]],\n    options: {\n      chart: {\n        title: 'Box Office Earnings in First Two Weeks of Opening',\n        subtitle: 'in millions of dollars (USD)'\n      },\n      colors: [primary, secondary, \"#51bb25\"],\n      height: 350,\n      width: '100%',\n      backgroundColor: 'transparent',\n      chartArea: {\n        left: 0,\n        top: 0,\n        bottom: 0\n      }\n    },\n    rootProps: {\n      'data-testid': '2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleBasicbarChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"BarChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n    options: {\n      title: 'Population of Largest U.S. Cities',\n      chartArea: {\n        width: '50%'\n      },\n      colors: [primary, secondary],\n      backgroundColor: 'transparent',\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0\n      },\n      vAxis: {\n        title: 'City'\n      }\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleMaterialDesignChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"Bar\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Year', 'Sales', 'Expenses', 'Profit'], ['2014', 1000, 400, 200], ['2015', 1170, 460, 250], ['2016', 660, 1120, 300], ['2017', 1030, 540, 350]],\n    options: {\n      colors: [primary, secondary, \"#51bb25\"],\n      chart: {\n        title: 'Company Performance',\n        subtitle: 'Sales, Expenses, and Profit: 2014-2017'\n      }\n    },\n    rootProps: {\n      'data-testid': '2'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleComboChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '300px',\n    chartType: \"ComboChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Month', 'Bolivia', 'Ecuador', 'Madagascar', 'Papua New Guinea', 'Rwanda', 'Average'], ['2004/05', 165, 938, 522, 998, 450, 614.6], ['2005/06', 135, 1120, 599, 1268, 288, 682], ['2006/07', 157, 1167, 587, 807, 397, 623], ['2007/08', 139, 1110, 615, 968, 215, 609.4], ['2008/09', 136, 691, 629, 1026, 366, 569.6]],\n    options: {\n      title: 'Monthly Coffee Production by Country',\n      vAxis: {\n        title: 'Cups'\n      },\n      hAxis: {\n        title: 'Month'\n      },\n      seriesType: 'bars',\n      colors: [primary, \"#51bb25\", secondary, \"#a927f9\", \"#f8d62b\"],\n      series: {\n        5: {\n          type: 'line'\n        }\n      },\n      backgroundColor: 'transparent'\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleBarChart2 = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"BarChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Element', 'Density', {\n      role: 'style'\n    }, {\n      sourceColumn: 1,\n      role: 'annotation',\n      type: 'string',\n      calc: 'stringify'\n    }], [\"Copper\", 10, \"#a927f9\", 10], [\"Silver\", 12, \"#f8d62b\", 12], [\"Gold\", 14, secondary, 14], [\"Platinum\", 16, primary, 16]],\n    options: {\n      title: 'Density of Precious Metals, in g/cm^3',\n      height: 400,\n      bar: {\n        groupWidth: '95%'\n      },\n      backgroundColor: 'transparent',\n      legend: {\n        position: 'none'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }\n  });\n};\nexport const GoogleTreeChart = () => {\n  return /*#__PURE__*/React.createElement(Chart, {\n    width: '100%',\n    height: '400px',\n    chartType: \"WordTree\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 21\n      }\n    }, \"Loading Chart\"),\n    data: [['Phrases'], ['cats are better than dogs'], ['cats eat kibble'], ['cats are better than hamsters'], ['cats are awesome'], ['cats are people too'], ['cats eat mice'], ['cats meowing'], ['cats in the cradle'], ['cats eat mice'], ['cats in the cradle lyrics'], ['cats eat kibble'], ['cats for adoption'], ['cats are family'], ['cats eat mice'], ['cats are better than kittens'], ['cats are evil'], ['cats are weird'], ['cats eat mice']],\n    options: {\n      wordtree: {\n        format: 'implicit',\n        word: 'cats',\n        backgroundColor: 'transparent'\n      }\n    },\n    rootProps: {\n      'data-testid': '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 9\n    }\n  });\n};","map":{"version":3,"sources":["/home/sonali/Downloads/react/theme/src/components/charts/googleCharts/googlechartData.jsx"],"names":["React","Chart","configDB","primary","localStorage","getItem","data","color","primary_color","secondary","secondary_color","GooglePieChart1","title","colors","GooglePieChart2","is3D","GoogleDonutChart","pieHole","GoogleRotatingPieChart1","legend","pieSliceText","pieStartAngle","GoogleRotatingPieChart2","slices","offset","GoogleSliceCharts","sliceVisibilityThreshold","GoogleAreaChart","hAxis","titleTextStyle","vAxis","minValue","chartArea","width","height","GoogleStackingChart","isStacked","position","maxLines","GoogleGhantChart","type","label","Date","gantt","criticalPathEnabled","arrow","angle","radius","palette","backgroundColor","GoogleLineChart","chart","subtitle","left","top","bottom","GoogleBasicbarChart","GoogleMaterialDesignChart","GoogleComboChart","seriesType","series","GoogleBarChart2","role","sourceColumn","calc","bar","groupWidth","GoogleTreeChart","wordtree","format","word"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\nimport configDB from '../../../data/customizer/config'\nconst primary = localStorage.getItem('default_color') || configDB.data.color.primary_color;\nconst secondary = localStorage.getItem('secondary_color') || configDB.data.color.secondary_color;\n\n\nexport const GooglePieChart1 = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Task', 'Hours per Day'],\n                ['Work', 6.7],\n                ['Eat', 13.3],\n                ['Commute', 20],\n                ['Watch TV', 26.7],\n                ['Sleep', 33.3],\n            ]}\n            options={{\n                title: 'My Daily Activities',\n                colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary]\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    );\n}\n\nexport const GooglePieChart2 = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Task', 'Hours per Day'],\n                ['Work', 6.7],\n                ['Eat', 13.3],\n                ['Commute', 20],\n                ['Watch TV', 26.7],\n                ['Sleep', 33.3],\n            ]}\n            options={{\n                title: 'My Daily Activities',\n                colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary],\n                is3D: true,\n            }}\n            rootProps={{ 'data-testid': '2' }}\n        />\n    )\n}\n\nexport const GoogleDonutChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Task', 'Hours per Day'],\n                ['Work', 11],\n                ['Eat', 2],\n                ['Commute', 2],\n                ['Watch TV', 2],\n                ['Sleep', 7],\n            ]}\n            options={{\n                title: 'My Daily Activities',\n                colors: [\"#a927f9\", primary, \"#51bb25\", \"#f8d62b\", secondary, secondary],\n                pieHole: 0.4,\n            }}\n        />\n\n    )\n}\n\nexport const GoogleRotatingPieChart1 = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Language', 'Speakers (in millions)'],\n                ['German', 2.85],\n                ['French', 1.66],\n                ['Italian', 0.316],\n                ['Romansh', 0.0791],\n            ]}\n            options={{\n                legend: 'none',\n                pieSliceText: 'label',\n                title: 'Swiss Language Use (100 degree rotation)',\n                colors: [\"#a927f9\", primary, \"#51bb25\", \"#a927f9\", secondary],\n                pieStartAngle: 100,\n            }}\n            rootProps={{ 'data-testid': '4' }}\n        />\n    )\n}\nexport const GoogleRotatingPieChart2 = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Language', 'Speakers (in millions)'],\n                ['Assamese', 13],\n                ['Bengali', 83],\n                ['Bodo', 1.4],\n                ['Dogri', 2.3],\n                ['Gujarati', 46],\n                ['Hindi', 300],\n                ['Kannada', 38],\n                ['Kashmiri', 5.5],\n                ['Konkani', 5],\n                ['Maithili', 20],\n                ['Malayalam', 33],\n                ['Manipuri', 1.5],\n                ['Marathi', 72],\n                ['Nepali', 2.9],\n                ['Oriya', 33],\n                ['Punjabi', 29],\n                ['Sanskrit', 0.01],\n                ['Santhali', 6.5],\n                ['Sindhi', 2.5],\n                ['Tamil', 61],\n                ['Telugu', 74],\n                ['Urdu', 52],\n            ]}\n            options={{\n                title: 'Indian Language Use',\n                legend: 'none',\n                pieSliceText: 'label',\n                colors: [\"#a927f9\", primary, \"#fb740d\", secondary, \"#a927f9\", primary, \"#51bb25\", \"#a927f9\", \"#fb740d\", \"#a927f9\", primary, \"#51bb25\", \"#a927f9\", \"#51bb25\", primary, \"#51bb25\", \"#a927f9\", \"#fb740d\", \"#a927f9\", primary, primary, \"#ff9f40\"],\n                slices: {\n                    4: { offset: 0.2 },\n                    12: { offset: 0.3 },\n                    14: { offset: 0.4 },\n                    15: { offset: 0.5 },\n                },\n            }}\n            rootProps={{ 'data-testid': '5' }}\n        />\n    )\n}\nexport const GoogleSliceCharts = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"PieChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Pizza', 'Popularity'],\n                ['Pepperoni', 33],\n                ['Hawaiian', 26],\n                ['Mushroom', 22],\n                ['Sausage', 10],\n                ['Anchovies', 9],\n            ]}\n            options={{\n                title: 'Popularity of Types of Pizza',\n                colors: [primary, secondary, \"#51bb25\", \"#a927f9\", primary],\n                sliceVisibilityThreshold: 0.2,\n            }}\n            rootProps={{ 'data-testid': '7' }}\n        />\n    )\n}\nexport const GoogleAreaChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'300px'}\n            chartType=\"AreaChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Year', 'Sales', 'Expenses'],\n                ['2013', 1000, 400],\n                ['2014', 1170, 460],\n                ['2015', 660, 1120],\n                ['2016', 1030, 540],\n            ]}\n            options={{\n                title: 'Company Performance',\n                hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n                vAxis: { minValue: 0 },\n                colors: [\"#a927f9\", primary],\n                chartArea: { width: '50%', height: '70%' },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n\n}\nexport const GoogleStackingChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'300px'}\n            chartType=\"AreaChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Year', 'Sales', 'Expenses'],\n                ['2013', 1000, 400],\n                ['2014', 1170, 460],\n                ['2015', 660, 1120],\n                ['2016', 1030, 540],\n            ]}\n            options={{\n                isStacked: true,\n                height: 300,\n                legend: { position: 'top', maxLines: 3 },\n                vAxis: { minValue: 0 },\n                colors: [\"#a927f9\", primary],\n            }}\n            rootProps={{ 'data-testid': '2' }}\n        />\n    )\n}\n\nexport const GoogleGhantChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'300px'}\n            chartType=\"Gantt\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                [\n                    { type: 'string', label: 'Task ID' },\n                    { type: 'string', label: 'Task Name' },\n                    { type: 'date', label: 'Start Date' },\n                    { type: 'date', label: 'End Date' },\n                    { type: 'number', label: 'Duration' },\n                    { type: 'number', label: 'Percent Complete' },\n                    { type: 'string', label: 'Dependencies' },\n                ],\n                [\n                    'Research',\n                    'Find sources',\n                    new Date(2015, 0, 1),\n                    new Date(2015, 0, 5),\n                    null,\n                    100,\n                    null,\n                ],\n                [\n                    'Write',\n                    'Write paper',\n                    null,\n                    new Date(2015, 0, 9),\n                    3 * 24 * 60 * 60 * 1000,\n                    25,\n                    'Research,Outline',\n                ],\n                [\n                    'Cite',\n                    'Create bibliography',\n                    null,\n                    new Date(2015, 0, 7),\n                    1 * 24 * 60 * 60 * 1000,\n                    20,\n                    'Research',\n                ],\n                [\n                    'Complete',\n                    'Hand in paper',\n                    null,\n                    new Date(2015, 0, 10),\n                    1 * 24 * 60 * 60 * 1000,\n                    0,\n                    'Cite,Write',\n                ],\n                [\n                    'Outline',\n                    'Outline paper',\n                    null,\n                    new Date(2015, 0, 6),\n                    1 * 24 * 60 * 60 * 1000,\n                    100,\n                    'Research',\n                ],\n            ]}\n            options={{\n                gantt: {\n                    criticalPathEnabled: false,\n                    arrow: {\n                        angle: 100,\n                        width: 5,\n                        color: '#51bb25',\n                        radius: 0\n                    },\n\n                    palette: [\n                        {\n                            \"color\": primary,\n                            \"dark\": secondary,\n                            \"light\": \"#047afb\"\n                        }\n                    ]\n\n                },\n                backgroundColor: 'transparent',\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n}\n\nexport const GoogleLineChart = () => {\n    return (\n        <Chart\n            chartType=\"LineChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['month', 'Guardians of the Galaxy', 'The Avengers', 'Transformers: Age of Extinction'],\n                [1, 37.8, 80.8, 41.8],\n                [2, 30.9, 10.5, 32.4],\n                [3, 40.4, 57, 25.7],\n                [4, 11.7, 18.8, 10.5],\n                [5, 20, 17.6, 10.4],\n                [6, 8.8, 13.6, 7.7],\n                [7, 7.6, 12.3, 9.6],\n                [8, 12.3, 29.2, 10.6],\n                [9, 16.9, 42.9, 14.8],\n                [10, 12.8, 30.9, 11.6],\n                [11, 5.3, 7.9, 4.7],\n                [12, 6.6, 8.4, 5.2],\n            ]}\n            options={{\n                chart: {\n                    title: 'Box Office Earnings in First Two Weeks of Opening',\n                    subtitle: 'in millions of dollars (USD)'\n                },\n                colors: [primary, secondary, \"#51bb25\"],\n                height: 350,\n                width: '100%',\n                backgroundColor: 'transparent',\n                chartArea: {\n                    left: 0,\n                    top: 0,\n                    bottom: 0\n                }\n            }}\n            rootProps={{ 'data-testid': '2' }}\n        />\n    )\n}\n\nexport const GoogleBasicbarChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"BarChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['City', '2010 Population', '2000 Population'],\n                ['New York City, NY', 8175000, 8008000],\n                ['Los Angeles, CA', 3792000, 3694000],\n                ['Chicago, IL', 2695000, 2896000],\n                ['Houston, TX', 2099000, 1953000],\n                ['Philadelphia, PA', 1526000, 1517000],\n            ]}\n            options={{\n                title: 'Population of Largest U.S. Cities',\n                chartArea: { width: '50%' },\n                colors: [primary, secondary],\n                backgroundColor: 'transparent',\n                hAxis: {\n                    title: 'Total Population',\n                    minValue: 0,\n                },\n                vAxis: {\n                    title: 'City',\n                },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n}\n\nexport const GoogleMaterialDesignChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"Bar\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Year', 'Sales', 'Expenses', 'Profit'],\n                ['2014', 1000, 400, 200],\n                ['2015', 1170, 460, 250],\n                ['2016', 660, 1120, 300],\n                ['2017', 1030, 540, 350],\n            ]}\n            options={{\n                colors: [primary, secondary, \"#51bb25\"],\n                chart: {\n                    title: 'Company Performance',\n                    subtitle: 'Sales, Expenses, and Profit: 2014-2017',\n                },\n            }}\n            rootProps={{ 'data-testid': '2' }}\n        />\n    )\n}\n\nexport const GoogleComboChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'300px'}\n            chartType=\"ComboChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                [\n                    'Month',\n                    'Bolivia',\n                    'Ecuador',\n                    'Madagascar',\n                    'Papua New Guinea',\n                    'Rwanda',\n                    'Average',\n                ],\n                ['2004/05', 165, 938, 522, 998, 450, 614.6],\n                ['2005/06', 135, 1120, 599, 1268, 288, 682],\n                ['2006/07', 157, 1167, 587, 807, 397, 623],\n                ['2007/08', 139, 1110, 615, 968, 215, 609.4],\n                ['2008/09', 136, 691, 629, 1026, 366, 569.6],\n            ]}\n            options={{\n                title: 'Monthly Coffee Production by Country',\n                vAxis: { title: 'Cups' },\n                hAxis: { title: 'Month' },\n                seriesType: 'bars',\n                colors: [primary, \"#51bb25\", secondary, \"#a927f9\", \"#f8d62b\"],\n                series: { 5: { type: 'line' } },\n                backgroundColor: 'transparent',\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n}\n\nexport const GoogleBarChart2 = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"BarChart\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                [\n                    'Element',\n                    'Density',\n                    { role: 'style' },\n                    {\n                        sourceColumn: 1,\n                        role: 'annotation',\n                        type: 'string',\n                        calc: 'stringify',\n                    },\n                ],\n                [\"Copper\", 10, \"#a927f9\", 10],\n                [\"Silver\", 12, \"#f8d62b\", 12],\n                [\"Gold\", 14, secondary, 14],\n                [\"Platinum\", 16, primary, 16]\n            ]}\n            options={{\n                title: 'Density of Precious Metals, in g/cm^3',\n                height: 400,\n                bar: { groupWidth: '95%' },\n                backgroundColor: 'transparent',\n                legend: { position: 'none' },\n            }}\n        />\n    )\n}\n\nexport const GoogleTreeChart = () => {\n    return (\n        <Chart\n            width={'100%'}\n            height={'400px'}\n            chartType=\"WordTree\"\n            loader={<div>{\"Loading Chart\"}</div>}\n            data={[\n                ['Phrases'],\n                ['cats are better than dogs'],\n                ['cats eat kibble'],\n                ['cats are better than hamsters'],\n                ['cats are awesome'],\n                ['cats are people too'],\n                ['cats eat mice'],\n                ['cats meowing'],\n                ['cats in the cradle'],\n                ['cats eat mice'],\n                ['cats in the cradle lyrics'],\n                ['cats eat kibble'],\n                ['cats for adoption'],\n                ['cats are family'],\n                ['cats eat mice'],\n                ['cats are better than kittens'],\n                ['cats are evil'],\n                ['cats are weird'],\n                ['cats eat mice'],\n            ]}\n            options={{\n                wordtree: {\n                    format: 'implicit',\n                    word: 'cats',\n                    backgroundColor: 'transparent',\n                },\n            }}\n            rootProps={{ 'data-testid': '1' }}\n        />\n    )\n}"]},"metadata":{},"sourceType":"module"}