{"ast":null,"code":"var _jsxFileName = \"/home/sonali/Downloads/react/theme/src/components/icons/typicon.jsx\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb';\nimport IconMarkUp from './Icon-markup';\nimport { Container, Row, Col, Card, CardHeader, CardBody } from 'reactstrap';\nimport axios from 'axios';\nimport { TypiconsIcons } from \"../../constant\";\n\nconst Typeicon = props => {\n  const [data, setData] = useState([]);\n  const [iTag, setiTag] = useState('');\n  const [icon, setIcon] = useState('');\n  useEffect(() => {\n    axios.get(`${process.env.PUBLIC_URL}/api/typ-icon-data.json`).then(res => setData(res.data));\n  }, []);\n\n  const getItag = tag => {\n    setiTag({\n      iTag: '<i className= \"' + tag + '\"></i>'\n    });\n    setIcon({\n      icon: '' + tag + ' fa-2x'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    parent: \"Icons\",\n    title: \"Typicons Icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }, data.map((icons, index) => {\n    return /*#__PURE__*/React.createElement(Row, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      sm: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"m-b-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, TypiconsIcons)), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"icon-lists\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }, icons.typ_icons.map((icon, i) => {\n      return /*#__PURE__*/React.createElement(Col, {\n        sm: \"6\",\n        lg: \"4\",\n        key: i,\n        onClick: e => getItag(icon),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `${icon}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 37\n        }\n      }), \" \", icon);\n    }))))));\n  })), /*#__PURE__*/React.createElement(IconMarkUp, {\n    itag: iTag,\n    icons: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Typeicon;","map":{"version":3,"sources":["/home/sonali/Downloads/react/theme/src/components/icons/typicon.jsx"],"names":["React","Fragment","useState","useEffect","Breadcrumb","IconMarkUp","Container","Row","Col","Card","CardHeader","CardBody","axios","TypiconsIcons","Typeicon","props","data","setData","iTag","setiTag","icon","setIcon","get","process","env","PUBLIC_URL","then","res","getItag","tag","map","icons","index","typ_icons","i","e"],"mappings":"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","sourcesContent":["import React, { Fragment,useState,useEffect } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb'\nimport IconMarkUp from './Icon-markup';\nimport {Container,Row,Col,Card,CardHeader,CardBody} from 'reactstrap'\nimport axios from 'axios'\nimport {TypiconsIcons} from \"../../constant\";\n\nconst Typeicon = (props) =>  {\n\n    const [data,setData] = useState([])\n    const [iTag, setiTag] = useState('');\n    const [icon, setIcon] = useState('');\n\n    useEffect(() => {\n      axios.get(`${process.env.PUBLIC_URL}/api/typ-icon-data.json`).then(res => setData(res.data))\n    },[])\n    \n    const getItag = (tag) => {\n        setiTag({\n            iTag: '<i className= \"' + tag + '\"></i>',\n        })\n        setIcon({\n            icon : '' + tag + ' fa-2x'\n        })\n    }\n    return (\n        <Fragment>\n        <Breadcrumb parent=\"Icons\" title=\"Typicons Icon\"/>\n         <Container fluid={true}>\n            {\n            data.map((icons, index) => {\n            return (\n            <Row key={index}>\n              <Col sm=\"12\">\n                <Card>\n                  <CardHeader>\n                    <h5 className=\"m-b-0\">{TypiconsIcons}</h5>\n                  </CardHeader>\n                  <CardBody>\n                    <Row className=\"icon-lists\">\n                    {icons.typ_icons.map((icon, i) => {\n                            return (\n                                <Col sm=\"6\" lg=\"4\" key={i}  onClick={(e) => getItag(icon)}>\n                                    <i className={`${icon}`}></i> {icon}\n                                </Col>\n                            )\n                        })\n                        }\n                    </Row>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n             )\n            })\n         }\n        </Container> \n        <IconMarkUp itag={iTag} icons={icon} />   \n        </Fragment>\n    );\n}\n\nexport default Typeicon;"]},"metadata":{},"sourceType":"module"}