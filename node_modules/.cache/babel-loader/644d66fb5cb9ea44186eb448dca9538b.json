{"ast":null,"code":"var _jsxFileName = \"/home/sonali/Downloads/react/theme/src/components/bonus_ui/imagecrop.jsx\";\nimport React, { Fragment, useState, useRef, useCallback } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb';\nimport { Container, Card, CardHeader, CardBody } from 'reactstrap';\nimport ReactCrop from 'react-image-crop';\nimport { ImageCropper } from '../../constant';\n\nconst Imagecropper = props => {\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [previewUrl, setPreviewUrl] = useState();\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      createCropPreview(imgRef.current, crop, 'newFile.jpeg');\n    }\n  };\n\n  const createCropPreview = async (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(previewUrl);\n        setPreviewUrl(window.URL.createObjectURL(blob));\n      }, 'image/jpeg');\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    parent: \"Bouns Ui\",\n    title: \"Image Cropper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, ImageCropper)), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-cropper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: onSelectFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(ReactCrop, {\n    src: upImg,\n    crop: crop,\n    onImageLoaded: onLoad,\n    onChange: c => setCrop(c),\n    onComplete: makeClientCrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }), previewUrl && /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Crop preview\",\n    src: previewUrl,\n    style: {\n      maxWidth: \"100%\"\n    },\n    className: \"crop-portion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 30\n    }\n  })))));\n};\n\nexport default Imagecropper;","map":{"version":3,"sources":["/home/sonali/Downloads/react/theme/src/components/bonus_ui/imagecrop.jsx"],"names":["React","Fragment","useState","useRef","useCallback","Breadcrumb","Container","Card","CardHeader","CardBody","ReactCrop","ImageCropper","Imagecropper","props","upImg","setUpImg","imgRef","crop","setCrop","unit","width","aspect","previewUrl","setPreviewUrl","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","makeClientCrop","height","createCropPreview","image","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","Error","name","window","URL","revokeObjectURL","createObjectURL","c","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment,useState,useRef,useCallback } from 'react';\nimport Breadcrumb from '../../layout/breadcrumb'\nimport {Container,Card,CardHeader,CardBody} from 'reactstrap'\nimport ReactCrop from 'react-image-crop';\nimport {ImageCropper} from '../../constant'\n\nconst Imagecropper = (props)  => {\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n  const [previewUrl, setPreviewUrl] = useState();\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      createCropPreview(imgRef.current, crop, 'newFile.jpeg');\n    }\n  };\n\n  const createCropPreview = async (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n        blob.name = fileName;\n        window.URL.revokeObjectURL(previewUrl);\n        setPreviewUrl(window.URL.createObjectURL(blob));\n      }, 'image/jpeg');\n    });\n  };\n\n  return (\n    <Fragment>\n    <Breadcrumb parent=\"Bouns Ui\" title=\"Image Cropper\"/>\n    <Container fluid={true}>\n      <Card>\n          <CardHeader>\n              <h5>{ImageCropper}</h5>\n          </CardHeader>\n          <CardBody>\n              <div className=\"input-cropper\">\n                  <input type=\"file\" onChange={onSelectFile} />\n              </div>\n              <ReactCrop\n                src={upImg}\n                crop={crop}\n                onImageLoaded={onLoad}\n                onChange={c => setCrop(c)}\n                onComplete={makeClientCrop}\n              />\n              {previewUrl && <img alt=\"Crop preview\" src={previewUrl}  style={{ maxWidth: \"100%\" }}  className=\"crop-portion\"  />}\n            </CardBody>\n        </Card>\n      </Container>\n      </Fragment>\n\n  );\n}\n\nexport default Imagecropper;"]},"metadata":{},"sourceType":"module"}